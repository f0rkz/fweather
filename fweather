#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import json
import requests
import time


class FWeather(object):
    def __init__(self):
        ##############################################################################
        #
        # Frequency in which fweather updates (in seconds)
        # Default: 90
        # Be warned! forecast.io charges for any calls over 1000.
        # The 90 second default will make 960 calls.
        #
        ##############################################################################
        self.call_frequency = os.environ.get('FWEATHER_CALL_FREQUENCY', 90)

        ##############################################################################
        #
        # forecast.io / darksky.net API key.
        # Sign up for an API key here: https://darksky.net/dev/
        #
        ##############################################################################
        self.api_key = os.environ.get('FORECASTIO_API_KEY', None)

        ##############################################################################
        #
        # Base directories
        #
        ##############################################################################
        self.home_dir = os.path.join(os.environ.get('HOME'))
        self.cache_dir = os.path.join(self.home_dir, '.cache')
        self.config_dir = os.path.join(self.home_dir, '.config')

        if not os.path.isdir(self.cache_dir):
            os.makedirs(self.cache_dir)

        if not os.path.isdir(self.config_dir):
            os.makedirs(self.config_dir)

        ##############################################################################
        #
        # Cache configuration
        #
        ##############################################################################
        self.weather_cache_dir = os.path.join(self.cache_dir, 'fweather')
        self.weather_cache_json = os.path.join(self.weather_cache_dir, 'weather.json')

        if not os.path.isdir(self.weather_cache_dir):
            os.makedirs(self.weather_cache_dir)

        ##############################################################################
        #
        # fweather can load a json configuration if that is preferred over ENV
        # If fweather.json exists, load it up and replace the current config.
        #
        ###############################################################################
        self.fweather_config_file = os.path.join(self.config_dir, 'fweather.json')
        if os.path.isfile(self.fweather_config_file):
            with open(self.fweather_config_file, 'r') as f:
                fweather_config = json.load(f)
                self.call_frequency = fweather_config.get('frequency', 90)
                self.api_key = fweather_config.get('forecastio_api_key', None)

        ###############################################################################
        #
        # URL Configuration for remote API services.
        #
        ################################################################################
        self.url_geoip = 'http://freegeoip.net/json'
        self.url_weather = 'https://api.darksky.net/forecast/%s/%s,%s'

    def _load_weather(self):
        if os.path.isfile(self.weather_cache_json):
            with open(self.weather_cache_json, 'r') as weather_json:
                return json.load(weather_json)

        return None

    def _save_weather(self, weather):
        # JSON map
        """
        weather = {
            "last_run": int(time.time()),
            "weather": {
                "city": city,
                "condition_icon": condition_icon,
                "condition": condition,
                "temperature": temperature,
                "windspeed": windspeed
            }
        }
        """
        with open(self.weather_cache_json, 'w') as weather_file:
            json.dump(weather, weather_file)

        return

    def _can_i_run_yet(self):
        weather = self._load_weather()
        if weather is None or int(weather['last_run']) + int(self.call_frequency) <= int(time.time()):
            return True

        return False

    def _get_location_info(self):
        r = requests.get(self.url_geoip)
        return r.json()

    def _get_current_weather_info(self, lat, lon):
        r = requests.get(self.url_weather % (self.api_key, lat, lon))
        weather_json = r.json()
        return weather_json['currently']

    def _get_icon(self, condition):
        icon_map = {
            "clear-day": "☀️",
            "clear-night": "🌙",
            "rain": "🌧",
            "snow": "🌨",
            "sleet": "🌨",
            "wind": "🌬",
            "fog": "🌫",
            "cloudy": "🌥",
            "partly-cloudy-day": "🌤",
            "partly-cloudy-night": "🌙☁️️",
            "hail": "⛔🌨⛔",
            "thunderstorm": "⛔⛈⛔",
            "tornado": "⛔🌪⛔",
        }
        return icon_map.get(condition, "❓")

    def _render(self, weather):
        return("{city}: {condition_icon}  {condition} {temperature}°F {windspeed}mph".format(
            city=weather['weather']['city'],
            condition_icon=self._get_icon(condition=weather['weather']['condition_icon']),
            condition=weather['weather']['condition'],
            temperature=weather['weather']['temperature'],
            windspeed=weather['weather']['windspeed'],
        ))

    def get_weather(self):
        if self.api_key is not None:
            weather = self._load_weather()

            if self._can_i_run_yet():
                location = self._get_location_info()
                weather_info = self._get_current_weather_info(lat=location['latitude'], lon=location['longitude'])

                weather = {
                    'last_run': int(time.time()),
                    'weather': {
                        'city': location['city'],
                        'condition_icon': weather_info['icon'],
                        'condition': weather_info['summary'],
                        'temperature': weather_info['temperature'],
                        'windspeed': weather_info['windSpeed'],
                    }
                }

                self._save_weather(weather)

            print(self._render(weather))

        else:
            print("💀 No API Key Configured 💀")


if __name__ == '__main__':
    FWeather().get_weather()
